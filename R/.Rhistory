Boot_3[www] = max(abs(gamma_boot))
}
###########################################
#####  95%   ##############################
alpha = 0.05
Q1 = sort(Boot_1)
Q2 = sort(Boot_2)
Q3 = sort(Boot_3)
e_cdf_1 = 1:length(Q1) / length(Q1)
e_cdf_2 = 1:length(Q2) / length(Q2)
e_cdf_3 = 1:length(Q3) / length(Q3)
Band1 = Q1[which(e_cdf_1 >= (1-alpha))[1]]
Band2 = Q2[which(e_cdf_2 >= (1-alpha))[1]]
Band3 = Q3[which(e_cdf_3 >= (1-alpha))[1]]
Upper_B1 = beta1.hat+Band1
Lower_B1 = beta1.hat-Band1
Upper_B2 = beta2.hat+Band2
Lower_B2 = beta2.hat-Band2
Upper_Gamma = gamma.hat+Band3
Lower_Gamma = gamma.hat-Band3
write.csv(Upper_B1, file = "SCB_Upper_Bike_beta1_95.csv")  #ns*nt
write.csv(Lower_B1, file = "SCB_Lower_Bike_beta1_95.csv")  #ns*nt
write.csv(Upper_B2, file = "SCB_Upper_Bike_beta2_95.csv")  #ns*nt
write.csv(Lower_B2, file = "SCB_Lower_Bike_beta2_95.csv")  #ns*nt
write.csv(Upper_Gamma, file = "SCB_Upper_Bike_gamma_95.csv")  #ns*nt
write.csv(Lower_Gamma, file = "SCB_Lower_Bike_gamma_95.csv")  #ns*nt
###Plot###
###Beta###
#persp(t.x, t.y, t(Upper_B1))
###Gamma###
plot(1:24,gamma.hat, type = "l", xlim = c(1, 43), ylim=c(-0.25, 0.25), xlab = "Hour", ylab = "", las = 1)
lines(1:24, Upper_Gamma, col = "red", lty = 2)
lines(1:24, Lower_Gamma, col = "red", lty = 2)
abline(h=0, col = "grey")
###Coverage###
S1 = 0
s1 = 0
for(i in 1:24){
for(j in 1:24){
if((Lower_B1[i, j]<=0)&(Upper_B1[i, j]>=0))
S1 = S1+1
else{
s1 = s1+1
}
}
}
S1
s1
S2 = 0
s2 = 0
for(i in 1:24){
for(j in 1:24){
if((Lower_B2[i, j]<=0)&(Upper_B2[i, j]>=0))
S2 = S2+1
else{
s2 = s2+1
}
}
}
S2
s2
HAT_z = Z.train2%*%ginv(crossprod(Z.train2,Z.train2))%*%t(Z.train2)
II_z = diag(1, dim(HAT_z)[1], dim(HAT_z)[2])
tao1=matrix(rnorm(500*N, 0, 1), N, 500)
tao2=matrix(rnorm(500*N, 0, 1), N, 500)
tao3=matrix(rnorm(500*N, 0, 1), N, 500)
tao_1=tao_2=tao_3=matrix(NA, N*ns, 500)
for(d in 1:500){
tao_1[,d]=rep(tao1[,d],each=ns)
tao_2[,d]=rep(tao2[,d],each=ns)
tao_3[,d]=rep(tao3[,d],each=ns)
}
Boot_1 = rep(0, 500)
Boot_2 = rep(0, 500)
Boot_3 = rep(0, 500)
res=Z.train1%*%theta+Z.train2%*%rho-Y.train
d1=ginv(t(Z.train1)%*%(II_z - HAT_z)%*%Z.train1)%*%t(Z.train1)
d2=ginv(t(Z.train2)%*%(II - HAT)%*%Z.train2)%*%t(Z.train2)
kro1=kronecker(x1.bs,y1.bs)
kro2=kronecker(x2.bs,y2.bs)
for(www in 1:500){
epsilon1 = res*(tao_1[,www])
epsilon2 = res*(tao_2[,www])
epsilon3 = res*(tao_3[,www])
theta_boot_1 = (d1%*%epsilon1)[(1:(nj1*nj3))]
theta_boot_2 = (d1%*%epsilon2)[-(1:(nj1*nj3))]
rho_boot = (d2%*%epsilon3)
beta_boot_1=matrix(kro1%*%theta_boot_1,ns,nt)
beta_boot_2=matrix(kro2%*%theta_boot_2,ns,nt)
gamma_boot =z.bs%*%rho_boot
Boot_1[www] = max(abs(beta_boot_1))
Boot_2[www] = max(abs(beta_boot_2))
Boot_3[www] = max(abs(gamma_boot))
}
###########################################
#####  95%   ##############################
alpha = 0.05
Q1 = sort(Boot_1)
Q2 = sort(Boot_2)
Q3 = sort(Boot_3)
e_cdf_1 = 1:length(Q1) / length(Q1)
e_cdf_2 = 1:length(Q2) / length(Q2)
e_cdf_3 = 1:length(Q3) / length(Q3)
Band1 = Q1[which(e_cdf_1 >= (1-alpha))[1]]
Band2 = Q2[which(e_cdf_2 >= (1-alpha))[1]]
Band3 = Q3[which(e_cdf_3 >= (1-alpha))[1]]
Upper_B1 = beta1.hat+Band1
Lower_B1 = beta1.hat-Band1
Upper_B2 = beta2.hat+Band2
Lower_B2 = beta2.hat-Band2
Upper_Gamma = gamma.hat+Band3
Lower_Gamma = gamma.hat-Band3
write.csv(Upper_B1, file = "SCB_Upper_Bike_beta1_95.csv")  #ns*nt
write.csv(Lower_B1, file = "SCB_Lower_Bike_beta1_95.csv")  #ns*nt
write.csv(Upper_B2, file = "SCB_Upper_Bike_beta2_95.csv")  #ns*nt
write.csv(Lower_B2, file = "SCB_Lower_Bike_beta2_95.csv")  #ns*nt
write.csv(Upper_Gamma, file = "SCB_Upper_Bike_gamma_95.csv")  #ns*nt
write.csv(Lower_Gamma, file = "SCB_Lower_Bike_gamma_95.csv")  #ns*nt
###Plot###
###Beta###
#persp(t.x, t.y, t(Upper_B1))
###Gamma###
plot(1:24,gamma.hat, type = "l", xlim = c(1, 43), ylim=c(-0.25, 0.25), xlab = "Hour", ylab = "", las = 1)
lines(1:24, Upper_Gamma, col = "red", lty = 2)
lines(1:24, Lower_Gamma, col = "red", lty = 2)
abline(h=0, col = "grey")
###Coverage###
S1 = 0
s1 = 0
for(i in 1:24){
for(j in 1:24){
if((Lower_B1[i, j]<=0)&(Upper_B1[i, j]>=0))
S1 = S1+1
else{
s1 = s1+1
}
}
}
S1
s1
S2 = 0
s2 = 0
for(i in 1:24){
for(j in 1:24){
if((Lower_B2[i, j]<=0)&(Upper_B2[i, j]>=0))
S2 = S2+1
else{
s2 = s2+1
}
}
}
S2
s2
ns
plot(1:24,gamma.hat, type = "l", xlim = c(1, 24), xlab = "Hour", ylab = "", las = 1)
lines(1:24, Upper_Gamma, col = "red", lty = 2)
Band1
#######################################################################################################
############################Simultaneous Confidence Band###############################################
HAT.X = Z.train1%*%chol2inv(chol(crossprod(Z.train1,Z.train1)))%*%t(Z.train1)
HAT.Z = Z.train2%*%chol2inv(chol(crossprod(Z.train2,Z.train2)))%*%t(Z.train2)
II.X = diag(1, dim(HAT.X)[1], dim(HAT.X)[2])
II.Z = diag(1, dim(HAT.Z)[1], dim(HAT.Z)[2])
rho = chol2inv(chol(crossprod(Z.train2,(II.X-HAT.X)%*%Z.train2)))%*%crossprod(Z.train2,(II.X-HAT.X)%*%dY.train)
theta = chol2inv(chol(crossprod(Z.train1,Z.train1)))%*%crossprod(Z.train1,dY.train-Z.train2%*%rho)
theta1=theta[(1:(nj1*nj1))]
theta2=theta[-(1:(nj1*nj1))]
Residual.b = (Z.train1%*%theta+Z.train2%*%rho-Y.train)
Inverse.bx = chol2inv(chol(crossprod(Z.train1,(II.Z - HAT.Z)%*%Z.train1)))
Inverse.bz = chol2inv(chol(crossprod(Z.train2,(II.X - HAT.X)%*%Z.train2)))
rho = chol2inv(chol(crossprod(Z.train2,(II.X-HAT.X)%*%Z.train2)))%*%crossprod(Z.train2,(II.X-HAT.X)%*%Y.train)
theta = chol2inv(chol(crossprod(Z.train1,Z.train1)))%*%crossprod(Z.train1,Y.train-Z.train2%*%rho)
theta1=theta[(1:(nj1*nj1))]
theta2=theta[-(1:(nj1*nj1))]
Residual.b = (Z.train1%*%theta+Z.train2%*%rho-Y.train)
Inverse.bx = chol2inv(chol(crossprod(Z.train1,(II.Z - HAT.Z)%*%Z.train1)))
Inverse.bz = chol2inv(chol(crossprod(Z.train2,(II.X - HAT.X)%*%Z.train2)))
for(w in 1:boot){
epsilon1 = Residual.b*(tao1[,w])
epsilon2 = Residual.b*(tao2[,w])
epsilon3 = Residual.b*(tao3[,w])
theta.b1 = (Inverse.bx%*%crossprod(Z.train1,epsilon1))[(1:(nj1*nj1))]
theta.b2 = (Inverse.bx%*%crossprod(Z.train1,epsilon2))[-(1:(nj1*nj1))]
rho.b = Inverse.bz%*%crossprod(Z.train2,epsilon3)
beta1.b1=matrix(kronecker(x1.bs,y1.bs)%*%theta.b1,ns,nt)
beta2.b2=matrix(kronecker(x2.bs,y2.bs)%*%theta.b2,ns,nt)
gamma.b=yz.bs%*%rho.b
Boot.1 = c(Boot.1,max(abs(beta1.b1)))
Boot.2 = c(Boot.2,max(abs(beta2.b2)))
Boot.3 = c(Boot.3,max(abs(gamma.b)))
}
Quantile1 = quantile(Boot.1, 1-alpha)
Quantile2 = quantile(Boot.2, 1-alpha)
Quantile3 = quantile(Boot.3, 1-alpha)
HAT_z = Z.train2%*%ginv(crossprod(Z.train2,Z.train2))%*%t(Z.train2)
II_z = diag(1, dim(HAT_z)[1], dim(HAT_z)[2])
tao1=matrix(rnorm(500*N, 0, 1), N, 500)
tao2=matrix(rnorm(500*N, 0, 1), N, 500)
tao3=matrix(rnorm(500*N, 0, 1), N, 500)
tao_1=tao_2=tao_3=matrix(NA, N*ns, 500)
for(d in 1:500){
tao_1[,d]=rep(tao1[,d],each=ns)
tao_2[,d]=rep(tao2[,d],each=ns)
tao_3[,d]=rep(tao3[,d],each=ns)
}
Boot_1 = rep(0, 500)
Boot_2 = rep(0, 500)
Boot_3 = rep(0, 500)
res=Z.train1%*%theta+Z.train2%*%rho-Y.train
d1=ginv(t(Z.train1)%*%(II_z - HAT_z)%*%Z.train1)%*%t(Z.train1)
d2=ginv(t(Z.train2)%*%(II - HAT)%*%Z.train2)%*%t(Z.train2)
kro1=kronecker(x1.bs,y1.bs)
kro2=kronecker(x2.bs,y2.bs)
str(d1)
str(epsilon1)
epsilon1 = res*(tao_1[,1])
str(res)
str(tao_1[,1])
str(Y.train)
which(is.na(theta))
str(Y.train)
str(Z.train1%*%theta+Z.train2%*%rho)
res=Z.train1%*%theta+Z.train2%*%rho-Y.train
str(res)
d1=ginv(t(Z.train1)%*%(II_z - HAT_z)%*%Z.train1)%*%t(Z.train1)
d2=ginv(t(Z.train2)%*%(II - HAT)%*%Z.train2)%*%t(Z.train2)
kro1=kronecker(x1.bs,y1.bs)
kro2=kronecker(x2.bs,y2.bs)
str(tao_1[,1])
dim(res)[1]
tao.ind = 1:dim(res)[1]
for(www in 1:500){
epsilon1 = res*(tao_1[tao.ind,www])
epsilon2 = res*(tao_2[tao.ind,www])
epsilon3 = res*(tao_3[tao.ind,www])
theta_boot_1 = (d1%*%epsilon1)
theta_boot_2 = (d1%*%epsilon2)
rho_boot = (d2%*%epsilon3)
beta_boot_1=matrix(kro1%*%theta_boot_1,ns,nt)
beta_boot_2=matrix(kro2%*%theta_boot_2,ns,nt)
gamma_boot =z.bs%*%rho_boot
Boot_1[www] = max(abs(beta_boot_1))
Boot_2[www] = max(abs(beta_boot_2))
Boot_3[www] = max(abs(gamma_boot))
}
str(d1)
str(res*(tao_1[,1]))
str((tao_1[,1]))
str(res)
str(kro1)
epsilon1 = res*(tao_1[tao.ind,1])
str(epsilon1)
theta_boot_1 = (d1%*%epsilon1)
str(theta_boot_1)
24*24
tao.ind = 1:dim(res)[1]
for(www in 1:500){
epsilon1 = res*(tao_1[tao.ind,www])
epsilon2 = res*(tao_2[tao.ind,www])
epsilon3 = res*(tao_3[tao.ind,www])
theta_boot_1 = (d1%*%epsilon1)
theta_boot_2 = (d1%*%epsilon2)
rho_boot = (d2%*%epsilon3)
beta_boot_1=matrix(kro1%*%theta_boot_1,ns,nt)
beta_boot_2=matrix(kro2%*%theta_boot_2,ns,nt)
gamma_boot =z.bs%*%rho_boot
Boot_1[www] = max(abs(beta_boot_1))
Boot_2[www] = max(abs(beta_boot_2))
Boot_3[www] = max(abs(gamma_boot))
}
str(kro1)
str(theta_boot_1)
str(d1)
kro1=kronecker(x1.bs,y1.bs)
kro2=kronecker(x2.bs,y2.bs)
str(kro1)
str(x1.bw)
str(x1.bs)
str(y1.bs)
d1=ginv(t(Z.train1)%*%(II_z - HAT_z)%*%Z.train1)%*%t(Z.train1)
d2=ginv(t(Z.train2)%*%(II - HAT)%*%Z.train2)%*%t(Z.train2)
str(d1)
theta_boot_1 = (d1%*%epsilon1)[(1:(nj1*nj1))]
theta_boot_2 = (d1%*%epsilon2)[-(1:(nj1*nj3))]
rho_boot = (d2%*%epsilon3)
beta_boot_1=matrix(kro1%*%theta_boot_1,ns,nt)
beta_boot_2=matrix(kro2%*%theta_boot_2,ns,nt)
gamma_boot =z.bs%*%rho_boot
theta_boot_2 = (d1%*%epsilon2)[-(1:(nj1*nj1))]
rho_boot = (d2%*%epsilon3)
beta_boot_1=matrix(kro1%*%theta_boot_1,ns,nt)
beta_boot_2=matrix(kro2%*%theta_boot_2,ns,nt)
gamma_boot =yz.bs%*%rho_boot
max(abs(beta_boot_1))
HAT_z = Z.train2%*%ginv(crossprod(Z.train2,Z.train2))%*%t(Z.train2)
II_z = diag(1, dim(HAT_z)[1], dim(HAT_z)[2])
tao1=matrix(rnorm(500*N, 0, 1), N, 500)
tao2=matrix(rnorm(500*N, 0, 1), N, 500)
tao3=matrix(rnorm(500*N, 0, 1), N, 500)
tao_1=tao_2=tao_3=matrix(NA, N*ns, 500)
for(d in 1:500){
tao_1[,d]=rep(tao1[,d],each=ns)
tao_2[,d]=rep(tao2[,d],each=ns)
tao_3[,d]=rep(tao3[,d],each=ns)
}
Boot_1 = rep(0, 500)
Boot_2 = rep(0, 500)
Boot_3 = rep(0, 500)
res=Z.train1%*%theta+Z.train2%*%rho-Y.train
d1=ginv(t(Z.train1)%*%(II_z - HAT_z)%*%Z.train1)%*%t(Z.train1)
d2=ginv(t(Z.train2)%*%(II - HAT)%*%Z.train2)%*%t(Z.train2)
kro1=kronecker(x1.bs,y1.bs)
kro2=kronecker(x2.bs,y2.bs)
tao.ind = 1:dim(res)[1]
for(www in 1:500){
epsilon1 = res*(tao_1[tao.ind,www])
epsilon2 = res*(tao_2[tao.ind,www])
epsilon3 = res*(tao_3[tao.ind,www])
theta_boot_1 = (d1%*%epsilon1)[(1:(nj1*nj1))]
theta_boot_2 = (d1%*%epsilon2)[-(1:(nj1*nj1))]
rho_boot = (d2%*%epsilon3)
beta_boot_1=matrix(kro1%*%theta_boot_1,ns,nt)
beta_boot_2=matrix(kro2%*%theta_boot_2,ns,nt)
gamma_boot =yz.bs%*%rho_boot
Boot_1[www] = max(abs(beta_boot_1))
Boot_2[www] = max(abs(beta_boot_2))
Boot_3[www] = max(abs(gamma_boot))
}
###########################################
#####  95%   ##############################
alpha = 0.05
Q1 = sort(Boot_1)
Q2 = sort(Boot_2)
e_cdf_1 = 1:length(Q1) / length(Q1)
e_cdf_2 = 1:length(Q2) / length(Q2)
Band1 = Q1[which(e_cdf_1 >= (1-alpha))[1]]
Band2 = Q2[which(e_cdf_2 >= (1-alpha))[1]]
write.csv(Upper_B1, file = "SCB_Upper_Bike_beta1_95.csv")  #ns*nt
write.csv(Lower_B1, file = "SCB_Lower_Bike_beta1_95.csv")  #ns*nt
write.csv(Upper_B2, file = "SCB_Upper_Bike_beta2_95.csv")  #ns*nt
write.csv(Lower_B2, file = "SCB_Lower_Bike_beta2_95.csv")  #ns*nt
write.csv(Upper_Gamma, file = "SCB_Upper_Bike_gamma_95.csv")  #ns*nt
write.csv(Lower_Gamma, file = "SCB_Lower_Bike_gamma_95.csv")  #ns*nt
###Plot###
###Beta###
#persp(t.x, t.y, t(Upper_B1))
###Gamma###
plot(1:24,gamma.hat, type = "l", xlim = c(1, 24), xlab = "Hour", ylab = "", las = 1)
lines(1:24, Upper_Gamma, col = "red", lty = 2)
lines(1:24, Lower_Gamma, col = "red", lty = 2)
abline(h=0, col = "grey")
###Coverage###
S1 = 0
s1 = 0
for(i in 1:24){
for(j in 1:24){
if((Lower_B1[i, j]<=0)&(Upper_B1[i, j]>=0))
S1 = S1+1
else{
s1 = s1+1
}
}
}
S1
s1
S2 = 0
s2 = 0
for(i in 1:24){
for(j in 1:24){
if((Lower_B2[i, j]<=0)&(Upper_B2[i, j]>=0))
S2 = S2+1
else{
s2 = s2+1
}
}
}
S2
s2
alpha = 0.05
Q1 = sort(Boot_1)
Q2 = sort(Boot_2)
Q3 = sort(Boot_3)
e_cdf_1 = 1:length(Q1) / length(Q1)
e_cdf_2 = 1:length(Q2) / length(Q2)
e_cdf_3 = 1:length(Q3) / length(Q3)
Band1 = Q1[which(e_cdf_1 >= (1-alpha))[1]]
Band2 = Q2[which(e_cdf_2 >= (1-alpha))[1]]
Band3 = Q3[which(e_cdf_3 >= (1-alpha))[1]]
Band1
beta1.hat
Upper_B1 = beta1.hat+Band1
Lower_B1 = beta1.hat-Band1
Upper_B2 = beta2.hat+Band2
Lower_B2 = beta2.hat-Band2
Upper_Gamma = gamma.hat+Band3
Lower_Gamma = gamma.hat-Band3
write.csv(Upper_B1, file = "SCB_Upper_Bike_beta1_95.csv")  #ns*nt
write.csv(Lower_B1, file = "SCB_Lower_Bike_beta1_95.csv")  #ns*nt
write.csv(Upper_B2, file = "SCB_Upper_Bike_beta2_95.csv")  #ns*nt
write.csv(Lower_B2, file = "SCB_Lower_Bike_beta2_95.csv")  #ns*nt
write.csv(Upper_Gamma, file = "SCB_Upper_Bike_gamma_95.csv")  #ns*nt
write.csv(Lower_Gamma, file = "SCB_Lower_Bike_gamma_95.csv")  #ns*nt
plot(1:24,gamma.hat, type = "l", xlim = c(1, 24), xlab = "Hour", ylab = "", las = 1)
lines(1:24, Upper_Gamma, col = "red", lty = 2)
lines(1:24, Lower_Gamma, col = "red", lty = 2)
abline(h=0, col = "grey")
S1 = 0
s1 = 0
for(i in 1:24){
for(j in 1:24){
if((Lower_B1[i, j]<=0)&(Upper_B1[i, j]>=0))
S1 = S1+1
else{
s1 = s1+1
}
}
}
S1
s1
S2 = 0
s2 = 0
for(i in 1:24){
for(j in 1:24){
if((Lower_B2[i, j]<=0)&(Upper_B2[i, j]>=0))
S2 = S2+1
else{
s2 = s2+1
}
}
}
S2
s2
plot(1:24,gamma.hat, type = "l", xlim = c(1, 24), ylim = c(-1.8, 1.8),xlab = "Hour", ylab = "", las = 1)
lines(1:24, Upper_Gamma, col = "red", lty = 2)
lines(1:24, Lower_Gamma, col = "red", lty = 2)
plot(1:24,gamma.hat, type = "l", xlim = c(1, 24), ylim = c(-2.0, 2.0),xlab = "Hour", ylab = "", las = 1)
lines(1:24, Upper_Gamma, col = "red", lty = 2)
plot(1:24,gamma.hat, type = "l", xlim = c(1, 24), ylim = c(-2.5, 2.5),xlab = "Hour", ylab = "", las = 1)
lines(1:24, Upper_Gamma, col = "red", lty = 2)
lines(1:24, Lower_Gamma, col = "red", lty = 2)
abline(h=0, col = "grey")
plot(1:24,gamma.hat, type = "l", xlim = c(1, 24), ylim = c(-2.5, 2.5),xlab = "Hour", ylab = "log(Y+1)",ylab = "", las = 1, cex.lab = 1.5, cex.axis = 1.5)
plot(1:24,gamma.hat, type = "l", xlim = c(1, 24), ylim = c(-2.5, 2.5),xlab = "Hour", ylab = "log(Y+1)", las = 1, cex.lab = 1.5, cex.axis = 1.5)
lines(1:24, Upper_Gamma, col = "red", lty = 2)
lines(1:24, Lower_Gamma, col = "red", lty = 2)
abline(h=0, col = "grey")
str(Y)
plot(1:24,gamma.hat, type = "l", xlim = c(1, 24), ylim = c(-2.5, 2.5),xlab = "Hour", ylab = expression(gamma), las = 1, cex.lab = 1.5, cex.axis = 1.5)
lines(1:24, Upper_Gamma, col = "red", lty = 2)
lines(1:24, Lower_Gamma, col = "red", lty = 2)
abline(h=0, col = "grey")
plot(Y[1,], xlab="Hour", ylab="log(Y+1)",type = "l",las = 1, cex.lab = 1.5, cex.axis = 1.5)
for(i in 2:181){
lines(Y[i,])
}
nonworking=which(Z==0)
working=which(Z==1)
nonworking
working
par(mar=c(5,6,4,1)+.1)
plot(1:24,gamma.hat, type = "l", xlim = c(1, 24), ylim = c(-2.5, 2.5),xlab = "Hour", ylab = expression(gamma), las = 1, cex.lab = 1.5, cex.axis = 1.5)
lines(1:24, Upper_Gamma, col = "red", lty = 2)
lines(1:24, Lower_Gamma, col = "red", lty = 2)
abline(h=0, col = "grey")
plot(1:24,gamma.hat, type = "l", xlim = c(1, 24), ylim = c(-2.5, 2.5),xlab = "Hour", ylab = expression(gamma), las = 1, cex.lab = 1.5, lwd=2,cex.axis = 1.5, font.lab=2, font.axis=2)
lines(1:24, Upper_Gamma, lwd=2, col = "red", lty = 2)
lines(1:24, Lower_Gamma, lwd=2, col = "red", lty = 2)
abline(h=0, col = "grey")
abline(h=0, lwd=2, col = "grey")
par(mar=c(5,6,4,1)+.1)
plot(1:24,gamma.hat, type = "l", xlim = c(1, 24), ylim = c(-2.5, 2.5),xlab = "Hour", ylab = expression(gamma), las = 1, cex.lab = 1.5, lwd=2,cex.axis = 1.5, font.lab=2, font.axis=2)
lines(1:24, Upper_Gamma, lwd=2, col = "red", lty = 2)
lines(1:24, Lower_Gamma, lwd=2, col = "red", lty = 2)
abline(h=0, lwd=2, col = "grey")
plot(1:24,gamma.hat, type = "l", xlim = c(1, 24), ylim = c(-2.5, 2.5),xlab = "Hour", ylab = expression(gamma), las = 1, cex.lab = 1.5, lwd=3,cex.axis = 1.5, font.lab=2, font.axis=2)
lines(1:24, Upper_Gamma, lwd=3, col = "red", lty = 2)
lines(1:24, Lower_Gamma, lwd=3, col = "red", lty = 2)
abline(h=0, lwd=3, col = "grey")
library(maps)
library(FDAonDNN)
?FDADNN
FDADNN(Data, d, Grid, N, n, c(3, 5), 100, 0.01, 100, 32, 5)
library(pracma)
library(MASS)
#Two dimension functional data
d=2; N=c(3, 5); n=50
#Generate data
Grid=list(); Grid[[1]]=seq(1/N[1],1.00,length.out = N[1]); Grid[[2]]=seq(1/N[2],1.00,length.out = N[2])
x_data.1=as.vector(replicate(N[2], Grid[[1]]))
x_data.2=as.vector(t(replicate(N[1], Grid[[2]])))
x_train=cbind(x_data.1, x_data.2)
#True function
y_train.true=(-8)*1/(1+exp(cot(x_data.1^2)*cos(2*pi*x_data.2)))
#Covariance structure
cov=array(NA, c(N[1]*N[2], N[1]*N[2], 2))
for(i in 1:(N[1]*N[2])){
for(j in 1:(N[1]*N[2])){
cov[i,j,1]=cos(2*pi*(x_data.1[i] - x_data.1[j]))
cov[i,j,2]=cos(2*pi*(x_data.2[i] - x_data.2[j]))
}
}
Data=array(NA, c(n, N[1], N[2]))
for(i in 1:n){
error=mvrnorm(1, rep(0, N[1]*N[2]), (cov[,,1]+cov[,,2]))+rnorm(1, 0, 1)
Data[i,,]=matrix(error, N[1], N[2])+matrix(y_train.true, N[1], N[2])
}
FDADNN(Data, d, Grid, N, n, c(3, 5), 100, 0.01, 100, 32, 5)
setwd("~/Desktop/Hopper/FDA_DNN/FDAonDNN/R")
devtools::document()
setwd("~/Desktop/Hopper/FDA_DNN/FDAonDNN/R")
devtools::load_all()
devtools::install()
